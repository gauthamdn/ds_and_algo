package timedPractice;


// 70. Climbing Stairs
// https://leetcode.com/problems/climbing-stairs/ 


public class ClimbingStairs {

	//STEP 3: Memoization cache
	static Map<Integer, Integer> cache = new HashMap<>();
	
	public static void main(String[] args) {
		System.out.println(climbStairs(4));

	}

	private static int climbStairs(int n) {
		
		//Step1: base condition
		if(n == 0 || n == 1 )
			return 1;
		
		
		
		
		//Step2: write the recursive function. 
		// num of ways of climbing stairs for n steps is = num of ways of climing n-1 + n-2 steps
		// this is because in case of step1 there is only 1 way, in case of 2steps ( we can climb 1step by 1step ) or ( we can climb 2 steps at a time ) 
		// so its f(n) = f(n-1) + f(n-2)
		int numOfWays = climbStairs(n-1) + climbStairs(n-2);
		
		return numOfWays;
		
	}
	
	
	// STEP3: To improve the speed , use Memoization.
	// implement a cache and store the value in the cache. And use it to check if value exists for every recursive call

}
