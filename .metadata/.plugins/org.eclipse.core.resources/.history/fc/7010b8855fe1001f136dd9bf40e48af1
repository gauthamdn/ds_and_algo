package patterns.practice.Feb2025.fastandslow;

public class PalindromeList {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] list = {4,7,9,5,4};
		
		LinkedList linkedList = new LinkedList();
		linkedList.createLinkedList(list);
		palindrome(linkedList.head);
		
		
		

	}
	
	
	
		public static boolean palindrome(LinkedListNode head) {

		      // Replace this placeholder return statement with your code
		      
		      LinkedListNode slow = head;
		      LinkedListNode fast = head;
		      // identify the mid of the linkedlist
		      while(fast.next!=null){
		        slow = slow.next;
		        fast = fast.next.next;
		      }
		      
		      LinkedListNode midHead = slow.next;
		      slow = head;
		      LinkedListNode revLinkedlistHead = LinkedListReversal.reverseLinkedList(midHead);
		      LinkedListNode temp = revLinkedlistHead;
		      
		      while(temp.next !=null){
		        if(slow.data != temp.data )
		          return false;
		        else{
		          slow = slow.next;
		          temp = temp.next;
		        }
		      }
		      
		      LinkedListNode midListNode  = LinkedListReversal.reverseLinkedList(revLinkedlistHead);
		      slow.next = midListNode;
		        return true;
		    }
		    

}
