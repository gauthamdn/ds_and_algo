package leetcode.graphs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class NumWithSameConsecDiff_bfs_3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		int n = 4  ,k =3;
		
		int[] result = numWithSameConsecDiff( n,  k);
		for(int i = 0;i<result.length;i++)
			System.out.println(result[i]);
		

	}

	private static int[] numWithSameConsecDiff(int n, int k) {
		
		List<Integer> res = new ArrayList<>();
		
		// step1  : create a queue
		Queue<Integer> q = new LinkedList<>();
		
		// Step2: fill the queue with the digits that can be first digit. which is 1 to 0. because num can be 1 <num<9
		
		for(int num=1;num<9;num++)
			q.add(num);
		
		// Step3: how do we start bfs? using while there is a elem in queue.. keep looping
		
		while(!q.isEmpty()) {
			
			
			
		}
		
		
		
		int[] retres = new int[res.size()];
		for(int i =0;i<retres.length;i++) {
			retres[i]= res.get(i);
		}
		return retres;
	}

	private static void dfs(int num, int n, int k, List<Integer> res) {
		
		
		
		
		
		
	}

}
