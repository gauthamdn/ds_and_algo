package leetcode.graphs;

/*200. Number of Islands
Medium
Topics
Companies

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


Example 1:
Input: grid = [
  ['1','1','1','1','0'],
  ['1','1','0','1','0'],
  ['1','1','0','0','0'],
  ['0','0','0','0','0']
]
Output: 1

Example 2:
Input: grid = [
  ['1','1','0','0','0'],
  ['1','1','0','0','0'],
  ['0','0','1','0','0'],
  ['0','0','0','1','1']
]
Output: 3

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 300
    grid[i][j] is '0' or '1'.

*/

public class L200_NumOfIslands {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		char[][] grid = {
				  {'1','1','1','1','0'},
				  {'1','1','0','1','0'},
				  {'1','1','0','0','0'},
				  {'0','0','0','0','0'}
				};
	}
	
	public static int numIslands(char[][] grid) {
		// lets get m - num of rows and n num of columns 
		int m = grid.length;
		int n = grid[0].length;
		int result = 0;
		
		// now lets create our visited array for this mxn matrix. you can also use the matrix to store the visited value and save the space of visited array
		boolean[][] visited = new boolean[m][n];
		
		
		
		for(int i = 0;i<m;i++) {
			
			for(int j =0;j<n;j++) {
				
				if(grid[i][j] == '1' && !visited[i][j]) {
					result++;
					dfs(grid,visited,i,j,m,n);
				}
				
			}
			
		}
		
		return 0;
        
    }

	private static void dfs(char[][] grid, boolean[][] visited, int i, int j, int m, int n) {
		// TODO Auto-generated method stub
		
		visited[i][j] = true;
		// we have to go to the neibhors
		// 
		
		int[] directions = {{0,-1},{0,1},{1,0},{-1,0}}
		
		
	}

}
