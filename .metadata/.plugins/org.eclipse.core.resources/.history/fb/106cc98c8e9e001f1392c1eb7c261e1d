package leetcode.graphs;

import java.util.HashMap;
import java.util.Map;

public class L547_NumOfProvinces {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
	//	int[][] isConnected  = {{1,1,0},{1,1,0},{0,0,1}};
		
	//	System.out.println(findCircleNum(isConnected));
		
		int[][] isConnected1 = {{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,1,0,1,0,0,0,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,0,0,0,1,0,0,0,1,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}};
		System.out.println(findCircleNum(isConnected1));
	
	}
	
	
	public static int findCircleNum(int[][] isConnected) {

        // Step1: get the num of cities or num of nodes. ie n 
		int n = isConnected.length;
		// Step2: create a visited array to keep track if we visited the city or not
		boolean[] visited = new boolean[n];
		// counter for counting the num of provinces
		int cnt = 0;
		
		
		// In normal graph to find the path exists problem is connected between source and destination, we usually only do src to dest
		// however, in this case, we need to check or visit all the cities and not just src or destination
		
		for(int i = 0;i<n;i++) {
			if(!visited[i]) {
				cnt++;
				dfs(isConnected,visited,i,n);
				
			}
				
		}
		
		
		return cnt;

    }

	private static void dfs(int[][] isConnected, boolean[] visited, int curr, int n) {
	
		for(int i = 0;i<n;i++) {
			// if directly connected and its not visited
			if(isConnected[curr][i] == 1 && !visited[i] ) {
				visited[i] = true;
				dfs(isConnected,visited,i,n);
			}
		}
		
		
	}

}
