package hashtables;

public class SimpleHashTable {
	
	private StoredEmployee[] hashtable;

	public SimpleHashTable() {
		this.hashtable = new StoredEmployee[10];
	}
	
	
	private int hashKey(String key) {
		
		return key.length() % hashtable.length;
	}
	
	
	public void put(String key, Employee employee) {
		int hashedKey = hashKey(key);
		
		if(occupied(hashedKey)){
			// set a stop index - we need to know when to stop , ie if array ends then we need to stop
			// we will keep adding 1, if we reach end of array we loop around and until we reached the hashed key
			int stopIndex = hashedKey;
			
			// if first position we check is the last slot in the array, then set position to zero else increment by 1
			if(hashedKey == hashtable.length-1) {
				// this is the looping back to start of array when we hit the length of the array
				hashedKey = 0;
				
			}
			else
				hashedKey++;
			
			// keep probing until occupied and hashedkey is not stopindex
			while(occupied(hashedKey) && hashedKey!=stopIndex) {
				// the % below takes care of wrappign back to zero when we hit the length of the array
				hashedKey = (hashedKey+1 ) % hashtable.length;
			}
			
		}
		
		
		if(occupied(hashedKey))
			System.out.println("Sorry, there is already an employee at this position"+ hashedKey);
		else
			hashtable[hashedKey] = new StoredEmployee(key, employee);
	}
	
	public Employee get(String key) {
		int hashedKey = hashKey(key);	
		return hashtable[hashedKey];
	}
	
	
	public void printHashTable() {
		for(int i = 0; i<hashtable.length;i++) {
			System.out.println(hashtable[i]);
		}
	}
	
	private int findKey(String key) {
		int hashedKey = hashKey(key);
		
		if(hashtable[hashedKey]!=null && hashtable[hashedKey].key.equals(key)) {
			return hashedKey;
		}
		
		
	}
	
	
	// linear probing - add 1 if already occupied - keep probing until you find empty spot
	// create  method to check if the specific  position is already occupied
	// update put method to use linear probing
	// update the get method to use linear probing
	private boolean occupied(int index) {
		return hashtable[index]!=null;
	}
	

}
