package leetcode.graphs;

import java.util.HashMap;
import java.util.Map;

public class L547_NumOfProvinces {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
	//	int[][] isConnected  = {{1,1,0},{1,1,0},{0,0,1}};
		
	//	System.out.println(findCircleNum(isConnected));
		
		int[][] isConnected1 = {{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,1,0,1,0,0,0,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,0,0,0,1,0,0,0,1,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}};
		System.out.println(findCircleNum(isConnected1));
	
	}
	
	public static int findCircleNum1(int[][] isConnected) {

        int countofProvinces = 0;
        // map to keep a track of Node -> Province
        Map<Integer,Integer> provinceMap = new HashMap<>(); 
        int currProvince  = 1;
        provinceMap.put(0,currProvince);
        for(int i=0;i<isConnected.length;i++){
        	if(currProvince >countofProvinces) 
        		countofProvinces = currProvince;
        	 
        	if(provinceMap.containsKey(i))
        		currProvince = provinceMap.get(i);
        	else
        		currProvince++;
        	
        	
            for(int j=0;j<isConnected.length;j++){
            	if(isConnected[i][j] ==1 && provinceMap.get(j)==null)
            		provinceMap.put(j,currProvince);

            }

        }
        return countofProvinces;

    }
	
	public static int findCircleNum(int[][] isConnected) {

       
		int n = isConnected.length;
		boolean[] visited = new boolean[n];
		int cnt = 0;
		
		
		for(int i = 0;i<n;i++) {
			if(!visited[i]) {
				cnt++;
				dfs(isConnected,visited,i,n);
				
			}
				
		}
		
		
		return cnt;

    }

	private static void dfs(int[][] isConnected, boolean[] visited, int curr, int n) {
	
		for(int i = 0;i<n;i++) {
			if(isConnected[curr][i] == 1 && !visited[i]) {
				
			}
		}
		
		
	}

}
