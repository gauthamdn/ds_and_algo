package leetcode.graphs;

/* 
 * https://leetcode.com/problems/number-of-closed-islands/description/
 * Medium
 * 1254. Number of Closed Islands

 * 
 * Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

Example1:
Input: grid = {{1,1,1,1,1,1,1,0},{1,0,0,0,0,1,1,0},{1,0,1,0,1,1,1,0},{1,0,0,0,0,1,0,1},{1,1,1,1,1,1,1,0}}
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).


Example 2:
Input: grid = {{0,0,1,0,0},{0,1,0,1,0},{0,1,1,1,0}}
Output: 1

Example 3:
Input: grid = {{1,1,1,1,1,1,1},
               {1,0,0,0,0,0,1},
               {1,0,1,1,1,0,1},
               {1,0,1,0,1,0,1},
               {1,0,1,1,1,0,1},
               {1,0,0,0,0,0,1},
               {1,1,1,1,1,1,1}}
Output: 2

 

Constraints:

    1 <= grid.length, grid{0}.length <= 100
    0 <= grid{i}{j} <=1

 */


public class L1254_NumofClosedIslands {



	public static void main(String[] args) {

		//Approach:
		// Note: zero's are land and 1's represent water
		// Note: The question doesn't say that the elements at the edge of the matrix are surrounded by water or not like in the problem Leetcode200 Num of Islands
		//		 So its fair to assume that the matrix 0's in the edges (rightmost col, leftmost col, topmost row, bottom mostrow ) are no surrounded by water on the beyond side. 
		//		 So none of the land touching these elements form an island
		//		 Also, We will reset the 0's on the edge to 1's so that we consider them as visited and not have to traverse through them again. 
		int[][] grid = {{1,1,1,1,1,1,1,0},{1,0,0,0,0,1,1,0},{1,0,1,0,1,1,1,0},{1,0,0,0,0,1,0,1},{1,1,1,1,1,1,1,0}};
		System.out.println(closedIsland(grid));
		
		
	}
	
	
	public static int closedIsland(int[][] grid) {
		
		
		
		int result = 0;
		
		
		return result;
        
    }

}
